<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-parent</artifactId>
        <version>3.6.0-SNAPSHOT</version>
    </parent>

    <groupId>org.hibernate</groupId>
    <artifactId>jpa2-demo</artifactId>
    <packaging>jar</packaging>

    <name>JPA 2 and Criteria Demo</name>
    <description>JPA 2 and Criteria Demo</description>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>javassist</groupId>
            <artifactId>javassist</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.0-api</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>hibernate-testing</artifactId>
            <version>${version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!--
                Only really needed for the antrun plugin defined below (which in turn is only really needed
                to work around a missing feature on the compile plugin; lovely no?).  However I have not
                found a way to declare this dependency local to the antrun plugin and then reference it
                from the <javac />'s <classpath /> :(
            -->
            <groupId>${project.groupId}</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <version>1.0.0.Final</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <!-- Use the jpa-api defined here, crossing fingers they match up signature-wise -->
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.0-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <testResources>
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/resources</directory>
            </testResource>
            <testResource>
                <filtering>true</filtering>
                <directory>src/test/bundles</directory>
                <targetPath>../bundles</targetPath>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <!-- Define one configuration outside executions and without a phase in order to allow 'mvn antrun:run' -->
                <configuration>
                    <tasks>
                        <property name="target.dir" value="${project.build.directory}/generated-src/jpamodelgen"/>
                        <property name="src.dir" value="${project.build.sourceDirectory}"/>
                        <property name="jdk16_home" value="${jdk16_home}"/>
                        <property name="classpath" refid="maven.test.classpath"/>
                        <ant antfile="${basedir}/build.xml">
                            <target name="generate-metamodel"/>
                        </ant>
                    </tasks>
                </configuration>
                <executions>
                    <execution>
                        <id>process_annotations</id>
                        <phase>process-test-sources</phase>
                        <configuration>
                            <!-- No additional configuration needed. Unbound configuration gets inherited. (Feels wrong, but that's how it is) -->
                            <testSourceRoot>${project.build.directory}/generated-src/jpamodelgen</testSourceRoot>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>**/*TestCase.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>jaxb</id>
            <activation>
                <jdk>1.5</jdk>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>javax.xml.bind</groupId>
                    <artifactId>jaxb-api</artifactId>
                    <version>2.1</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.sun.xml.bind</groupId>
                    <artifactId>jaxb-impl</artifactId>
                    <version>2.1.3</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
